1. sizeof是运算符，查看数据类型占用内存空间大小
strlen是标准库函数，查看字符串长度、

sizeof(char) 1 sizeof(int) 4 sizeof(long) 4 sizeof(double) 8
sizeof(char*) sizeof(int*) sizeof(long*) sizeof(double*) 4字节
char占1个字节，int占4个字节，long点4个字节，而double占8个字节。但指针char*,int*,long*,double*都占4个字节的空间。
// 例子
    char arr1[] = { 'a','b','c','b'};
	char arr2[] = { "abcd" };
	int arr3[10] = { 0 };
	//arr1和arr2的区别
	cout << sizeof(arr1) << endl;
	cout << sizeof(arr2) << endl;
	//整型数组长度求法
	cout << sizeof(arr3)/sizeof(arr3[0]) << endl;
	cout << sizeof(arr3) / sizeof(&arr3) << endl;


// 例子
cout << "sizeof and strlen" << endl;
char* c = "abcdef";
char d[] = "abcdef";
char e[] = {'a','b','c','d','e','f'};
cout << sizeof(c) << " " <<  strlen(c) << endl;
cout << sizeof(d) << " " <<  strlen(d) << endl;
cout << sizeof(e) << " " << strlen(e) << endl;

输出的结果是 地址长度32位:
4 6
7 6
6 14

输出的结果是 地址长度64位:
sizeof and strlen
8 6
7 6
6 12
第一行定义c为一个字符指针变量，指向常量字符串，c里面存放的是字符串的首地址。
第二行定义d为一个字符数组，以字符串的形式给这个字符数组赋值。
第三行定义的也是个字符数组，以单个元素的形式赋值。

当以字符串赋值时，"abcdef",结尾自动加一个"/0".
strlen(c)遇到/0就会结束，求的是字符串的长度，为6.
sizeof(c)求的是类型空间大小，在前面说过，指针型所点的空间大小是4个字节，系统地址总线长度为32位时。

strlen(d)也是一样，字符串赋值，自动添加/0,求字符串的长度当然是6.
sizeof(d)是求这个数组所占空间的大小，即数组所占内存空间的字节数，应该为7（6个char+'\0'）

strlen(e),去找/0结尾的字符串的长度，由于找不到/0，所以返回的值是一个不确定的值。
sizeof(e), 数组e以单个元素赋值，没有/0结束符，所以所占空间的大小为6个字节。
